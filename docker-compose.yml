services:
  client:
    image: node:18-alpine
    working_dir: /app
    volumes:
      - ./frontend:/app
    ports:
      - "3000:3000"
    environment:
      - CI=true
    command: npm start
    depends_on:
      - products-service
      - auth-service
    stdin_open: true
    tty: true

  products-service:
    build: ./backend/products-service
    ports:
      - "1323:1323"
    volumes:
      - ./backend/products-service:/app
    restart: always
    environment:
      - DATABASE_URL=postgresql://user:password@db:5432/mydatabase?sslmode=disable
    depends_on:
      db:
        condition: service_healthy

  auth-service:
    build: ./backend/auth-service
    ports:
      - "8001:8000"
    restart: always
    environment:
      - DATABASE_URL=postgresql://user:password@db:5432/mydatabase
    depends_on:
      db:
        condition: service_healthy 
    volumes:
      - ./backend/auth-service:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  chatbot-service: 
      build: ./backend/chatbot-service
      ports:
        - "8002:8000" 
      volumes:
        - ./backend/chatbot-service:/app
      command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
 
      extra_hosts:
        - "host.docker.internal:host-gateway"
      environment:
        - OLLAMA_HOST=${OLLAMA_HOST}
      depends_on:
        - ollama

  ollama:
    image: ollama/ollama
    volumes:
      - ollama_data:/root/.ollama
    ports:
      - "11434:11434"
    restart: always

  db:
    image: postgres:13
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=mydatabase
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydatabase"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

volumes:
  postgres_data:
  ollama_data: {}